function [res] = run_LIF_model(params,start)
res = struct;
flag = true;
if nargin > 2
    error('输入变量过多！');
elseif nargin == 1
    flag = false; % 默认情况下为all
end
%% preparation
dt = params.dt;
ne = params.ne;
ni = params.ni;
t_end = params.duration_time/dt;
V_e = zeros(t_end, ne);
V_i = zeros(t_end, ni);
H_ie = zeros(t_end, ni);
H_ii = zeros(t_end, ni);
H_ee = zeros(t_end, ne);
H_ei = zeros(t_end, ne);
nf_e = zeros(t_end, 1);
nf_i = zeros(t_end, 1);
ref_e = zeros(t_end, ne);
ref_i = zeros(t_end, ni);
res.I_ee = zeros(t_end, ne);
res.I_ei = zeros(t_end, ne);
res.I_ie = zeros(t_end, ni);
res.I_ii = zeros(t_end, ni);
res.nft = zeros(t_end, ne+ni);

J_eex = random('Poisson',params.Ex_Poisson_lambda * dt,t_end,ne);
J_iex = random('Poisson',params.Ex_Poisson_lambda * dt,t_end,ni);
if flag
    V_e(1,:) = start.V_e;
    V_i(1,:) = start.V_i;
    H_ee(1,:) = start.H_ee;
    H_ie(1,:) = start.H_ie;
    H_ei(1,:) = start.H_ei;
    H_ii(1,:) = start.H_ii; 
    nf_e(1) = start.nfe;
    nf_i(1) = start.nfi;
    ref_e(1,:) = start.ref_e;
    ref_i(1,:) = start.ref_i;
end

connection_matrix_e = zeros(ne,ne+ni);
connection_matrix_i = zeros(ni,ne+ni);
flag2 = 4;
switch flag2
    case 1 % 无连接
    connection_matrix_e(:,1:ne)=zeros(ne,ne);
    connection_matrix_i(:,1:ne)=zeros(ni,ne);
    connection_matrix_e(:,ne+1:ne+ni)=zeros(ne,ni);
    connection_matrix_i(:,ne+1:ne+ni)=zeros(ni,ni);
    case 2 % 仅兴奋性连接
    connection_matrix_e(:,1:ne)=binornd(1,0.2,ne,ne);
    connection_matrix_i(:,1:ne)=zeros(ni,ne);
    connection_matrix_e(:,ne+1:ne+ni)=zeros(ne,ni);
    connection_matrix_i(:,ne+1:ne+ni)=zeros(ni,ni);
    case 3 % 仅抑制性连接
    connection_matrix_e(:,1:ne)=zeros(ne,ne);
    connection_matrix_i(:,1:ne)=zeros(ni,ne);
    connection_matrix_e(:,ne+1:ne+ni)=zeros(ne,ni);
    connection_matrix_i(:,ne+1:ne+ni)=binornd(1,0.1,ni,ni);
    case 4 % 正常连接
    connection_matrix_e(:,1:ne)=binornd(1,params.p_ee,ne,ne);
    connection_matrix_i(:,1:ne)=binornd(1,params.p_ei,ni,ne);
    connection_matrix_e(:,ne+1:ne+ni)=binornd(1,params.p_ie,ne,ni);
    connection_matrix_i(:,ne+1:ne+ni)=binornd(1,params.p_ii,ni,ni);
    case 5  % 两个兴奋性群体
    connection_matrix_e(1:ne/2,1:ne/2)=binornd(1,params.p_ee,ne/2,ne/2);
    connection_matrix_e(ne/2+1:ne,ne/2+1:ne)=binornd(1,params.p_ee,ne/2,ne/2);
    connection_matrix_e(1:ne/2,ne+1:ne+ni)=binornd(1,params.p_ie,ne/2,ni);
    connection_matrix_e(ne/2+1:ne,ne+1:ne+ni)=binornd(1,params.p_ie,ne/2,ni);
    connection_matrix_i(:,1:ne)=binornd(1,params.p_ei,ni,ne);
    connection_matrix_i(:,ne+1:ne+ni)=binornd(1,params.p_ii,ni,ni);
end
connection_mat = [connection_matrix_e; connection_matrix_i];
% connection_mat(logical(eye(ne+ni))) = 0; % 去掉自身的连接


%% run model
for i = 2:t_end % 从“这一时刻”计算
    %% 计算上一时刻电流    
    J_ee = params.s_ee;
    J_ei = (V_e(i-1,:)+params.Mr)*params.s_ei/(params.M+params.Mr);    
    J_ie = params.s_ie;
    J_ii = (V_i(i-1,:)+params.Mr)*params.s_ii/(params.M+params.Mr);

    I_eex = J_eex(i,:);
    I_iex = J_iex(i,:);
    I_ee = J_ee.*H_ee(i-1,:)/params.tau_ee;
    I_ei = J_ei.*H_ei(i-1,:)/params.tau_i;    
    I_ie = J_ie.*H_ie(i-1,:)/params.tau_ie;
    I_ii = J_ii.*H_ii(i-1,:)/params.tau_i;
    res.I_ee(i,:) = I_ee;
    res.I_ei(i,:) = I_ei;
    res.I_ie(i,:) = I_ie;
    res.I_ii(i,:) = I_ii;

    %% 上一时刻电压加电流得到这一时刻电压,高于阈值的电压归零并加入nf数组
    e_index = find(~ref_e(i,:));
    i_index = find(~ref_i(i,:));

    V_e(i,e_index) =  I_eex(e_index) + (I_ee(e_index) - I_ei(e_index)) * dt + V_e(i-1,e_index);
    V_i(i,i_index) =  I_iex(i_index) + (I_ie(i_index) - I_ii(i_index)) * dt + V_i(i-1,i_index);
    nf_e(i) = sum(V_e(i,:) > params.M);
    nf_i(i) = sum(V_i(i,:) > params.M);
    res.nft(i,:) = ([V_e(i,:) > params.M V_i(i,:) > params.M]);
    if params.tau_r ~= 0
        ref_e(i,V_e(i,:) > params.M) = 1;
        ref_i(i,V_i(i,:) > params.M) = 1;
    end
    
    V_e(i,V_e(i,:) > params.M) = 0;
    V_i(i,V_i(i,:) > params.M) = 0;
    
    %% 计算这一时刻的H
    connect = 'nofixed'; % 决定是随机连接还是固定连接
    if strcmp(connect, 'nofixed')
        fire_index = find(res.nft(i,:));
        efire_index = fire_index(fire_index<=ne);
        ifire_index = fire_index(fire_index>ne);
        Hee_generate = sum(connection_mat(efire_index,1:ne),1);
        Hie_generate = sum(connection_mat(efire_index,(ne+1):(ne+ni)),1);
        Hei_generate = sum(connection_mat(ifire_index,1:ne),1);
        Hii_generate = sum(connection_mat(ifire_index,(ne+1):(ne+ni)),1);
    else
        Hee_generate = binornd(nf_e(i)*ones(1,ne), params.p_ee);
        Hei_generate = binornd(nf_i(i)*ones(1,ne), params.p_ei);
        Hie_generate = binornd(nf_e(i)*ones(1,ni), params.p_ie);
        Hii_generate = binornd(nf_i(i)*ones(1,ni), params.p_ii);
        
%         Hee_generate(1:150) = binornd(sum(res.nft(i,1:150))*ones(1,ne/2), params.p_ee); % 两个兴奋性群体
%         Hee_generate(151:300) = binornd(sum(res.nft(i,151:300))*ones(1,ne/2), params.p_ee);
%         Hei_generate = binornd(nf_i(i)*ones(1,ne), params.p_ei);
%         Hie_generate = binornd(nf_e(i)*ones(1,ni), params.p_ie);
%         Hii_generate = binornd(nf_i(i)*ones(1,ni), params.p_ii);
    end

    Hee_consume = H_ee(i-1,:).*(1-exp(-dt/params.tau_ee));
    Hei_consume = H_ei(i-1,:).*(1-exp(-dt/params.tau_ei));
    Hie_consume = H_ie(i-1,:).*(1-exp(-dt/params.tau_ie));
    Hii_consume = H_ii(i-1,:).*(1-exp(-dt/params.tau_i));
        
    H_ee(i,:) = H_ee(i-1,:) + Hee_generate - Hee_consume;    
    H_ei(i,:) = H_ei(i-1,:) + Hei_generate - Hei_consume;
    H_ie(i,:) = H_ie(i-1,:) + Hie_generate - Hie_consume;
    H_ii(i,:) = H_ii(i-1,:) + Hii_generate - Hii_consume;

    H_ee(i,(H_ee(i,:)<0)) = 0; % 计算问题有可能出现负值，去掉负值
    H_ei(i,(H_ei(i,:)<0)) = 0;
    H_ie(i,(H_ie(i,:)<0)) = 0;
    H_ii(i,(H_ii(i,:)<0)) = 0;
    
    if params.tau_r ~= 0
        % 如果有不应期，可以选择是泊松随机的不应期还是固定时长的不应期，这里选择泊松随机的不应期
        ref_e_consume = random('Poisson',ref_e(i,:)./params.tau_r*dt);
        ref_i_consume = random('Poisson',ref_i(i,:)./params.tau_r*dt);    
%         ref_e_consume = ref_e(i,:).*(1-exp(-dt/params.tau_r));
%         ref_i_consume = ref_i(i,:).*(1-exp(-dt/params.tau_r));
        ref_e(i+1,:) = ref_e(i,:) - ref_e_consume;    
        ref_i(i+1,:) = ref_i(i,:) - ref_i_consume;
        ref_e(i+1,(ref_e(i+1,:)<0.001)) = 0;
        ref_i(i+1,(ref_i(i+1,:)<0.001)) = 0;
    end
end

res.V_e = V_e;
res.V_i = V_i;
res.H_ie = H_ie;
res.H_ii = H_ii;
res.H_ee = H_ee;
res.H_ei = H_ei;
% res.nf_e = nf_e;
% res.nf_i = nf_i;
res.fr_e = nf_e/dt;
res.fr_i = nf_i/dt;
res.ref_e = ref_e(1:end,:);
res.ref_i = ref_i(1:end,:);
res.I_eex = J_eex;
res.I_iex = J_iex;
res.I_e_mean = mean(I_eex,2)+mean(res.I_ee,2)-mean(res.I_ei,2);
res.I_i_mean = mean(I_iex,2)+mean(res.I_ie,2)-mean(res.I_ii,2);
% res.t = dt:dt:params.duration_time;

end
